// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open GuardedCommands.Frontend.AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | HIGH
  | EOF
  | PRINT
  | ASG
  | SKIP
  | ABORT
  | RETURN
  | FUNC
  | PROC
  | NEG
  | PLUS
  | MINUS
  | TIMES
  | AND
  | OR
  | EQ
  | LE
  | GE
  | LT
  | GT
  | NEQ
  | CARET
  | AMP
  | COMMA
  | COLON
  | SEMI
  | BAR
  | TO
  | IF
  | FI
  | DO
  | OD
  | BEGIN
  | END
  | LP
  | LCP
  | LSP
  | RP
  | RCP
  | RSP
  | ITYP
  | BTYP
  | ATYP
  | NAME of (string)
  | STRING of (string)
  | BOOL of (bool)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_HIGH
    | TOKEN_EOF
    | TOKEN_PRINT
    | TOKEN_ASG
    | TOKEN_SKIP
    | TOKEN_ABORT
    | TOKEN_RETURN
    | TOKEN_FUNC
    | TOKEN_PROC
    | TOKEN_NEG
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_EQ
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_NEQ
    | TOKEN_CARET
    | TOKEN_AMP
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMI
    | TOKEN_BAR
    | TOKEN_TO
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_BEGIN
    | TOKEN_END
    | TOKEN_LP
    | TOKEN_LCP
    | TOKEN_LSP
    | TOKEN_RP
    | TOKEN_RCP
    | TOKEN_RSP
    | TOKEN_ITYP
    | TOKEN_BTYP
    | TOKEN_ATYP
    | TOKEN_NAME
    | TOKEN_STRING
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM__startProg
    | NONTERM_Main
    | NONTERM_Prog
    | NONTERM_BasicTyp
    | NONTERM_Typ
    | NONTERM_Dec
    | NONTERM_DecL
    | NONTERM_DecList
    | NONTERM_Access
    | NONTERM_Stm
    | NONTERM_StmL
    | NONTERM_StmList
    | NONTERM_GuardedCommand
    | NONTERM_GCList
    | NONTERM_Exp
    | NONTERM_ExpL
    | NONTERM_ExpList

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | HIGH  -> 0 
  | EOF  -> 1 
  | PRINT  -> 2 
  | ASG  -> 3 
  | SKIP  -> 4 
  | ABORT  -> 5 
  | RETURN  -> 6 
  | FUNC  -> 7 
  | PROC  -> 8 
  | NEG  -> 9 
  | PLUS  -> 10 
  | MINUS  -> 11 
  | TIMES  -> 12 
  | AND  -> 13 
  | OR  -> 14 
  | EQ  -> 15 
  | LE  -> 16 
  | GE  -> 17 
  | LT  -> 18 
  | GT  -> 19 
  | NEQ  -> 20 
  | CARET  -> 21 
  | AMP  -> 22 
  | COMMA  -> 23 
  | COLON  -> 24 
  | SEMI  -> 25 
  | BAR  -> 26 
  | TO  -> 27 
  | IF  -> 28 
  | FI  -> 29 
  | DO  -> 30 
  | OD  -> 31 
  | BEGIN  -> 32 
  | END  -> 33 
  | LP  -> 34 
  | LCP  -> 35 
  | LSP  -> 36 
  | RP  -> 37 
  | RCP  -> 38 
  | RSP  -> 39 
  | ITYP  -> 40 
  | BTYP  -> 41 
  | ATYP  -> 42 
  | NAME _ -> 43 
  | STRING _ -> 44 
  | BOOL _ -> 45 
  | INT _ -> 46 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_HIGH 
  | 1 -> TOKEN_EOF 
  | 2 -> TOKEN_PRINT 
  | 3 -> TOKEN_ASG 
  | 4 -> TOKEN_SKIP 
  | 5 -> TOKEN_ABORT 
  | 6 -> TOKEN_RETURN 
  | 7 -> TOKEN_FUNC 
  | 8 -> TOKEN_PROC 
  | 9 -> TOKEN_NEG 
  | 10 -> TOKEN_PLUS 
  | 11 -> TOKEN_MINUS 
  | 12 -> TOKEN_TIMES 
  | 13 -> TOKEN_AND 
  | 14 -> TOKEN_OR 
  | 15 -> TOKEN_EQ 
  | 16 -> TOKEN_LE 
  | 17 -> TOKEN_GE 
  | 18 -> TOKEN_LT 
  | 19 -> TOKEN_GT 
  | 20 -> TOKEN_NEQ 
  | 21 -> TOKEN_CARET 
  | 22 -> TOKEN_AMP 
  | 23 -> TOKEN_COMMA 
  | 24 -> TOKEN_COLON 
  | 25 -> TOKEN_SEMI 
  | 26 -> TOKEN_BAR 
  | 27 -> TOKEN_TO 
  | 28 -> TOKEN_IF 
  | 29 -> TOKEN_FI 
  | 30 -> TOKEN_DO 
  | 31 -> TOKEN_OD 
  | 32 -> TOKEN_BEGIN 
  | 33 -> TOKEN_END 
  | 34 -> TOKEN_LP 
  | 35 -> TOKEN_LCP 
  | 36 -> TOKEN_LSP 
  | 37 -> TOKEN_RP 
  | 38 -> TOKEN_RCP 
  | 39 -> TOKEN_RSP 
  | 40 -> TOKEN_ITYP 
  | 41 -> TOKEN_BTYP 
  | 42 -> TOKEN_ATYP 
  | 43 -> TOKEN_NAME 
  | 44 -> TOKEN_STRING 
  | 45 -> TOKEN_BOOL 
  | 46 -> TOKEN_INT 
  | 49 -> TOKEN_end_of_input
  | 47 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM__startProg 
    | 2 -> NONTERM_Main 
    | 3 -> NONTERM_Prog 
    | 4 -> NONTERM_Prog 
    | 5 -> NONTERM_BasicTyp 
    | 6 -> NONTERM_BasicTyp 
    | 7 -> NONTERM_Typ 
    | 8 -> NONTERM_Typ 
    | 9 -> NONTERM_Typ 
    | 10 -> NONTERM_Typ 
    | 11 -> NONTERM_Dec 
    | 12 -> NONTERM_Dec 
    | 13 -> NONTERM_Dec 
    | 14 -> NONTERM_DecL 
    | 15 -> NONTERM_DecL 
    | 16 -> NONTERM_DecList 
    | 17 -> NONTERM_DecList 
    | 18 -> NONTERM_Access 
    | 19 -> NONTERM_Access 
    | 20 -> NONTERM_Access 
    | 21 -> NONTERM_Stm 
    | 22 -> NONTERM_Stm 
    | 23 -> NONTERM_Stm 
    | 24 -> NONTERM_Stm 
    | 25 -> NONTERM_Stm 
    | 26 -> NONTERM_Stm 
    | 27 -> NONTERM_Stm 
    | 28 -> NONTERM_Stm 
    | 29 -> NONTERM_Stm 
    | 30 -> NONTERM_Stm 
    | 31 -> NONTERM_Stm 
    | 32 -> NONTERM_StmL 
    | 33 -> NONTERM_StmL 
    | 34 -> NONTERM_StmList 
    | 35 -> NONTERM_StmList 
    | 36 -> NONTERM_GuardedCommand 
    | 37 -> NONTERM_GuardedCommand 
    | 38 -> NONTERM_GCList 
    | 39 -> NONTERM_GCList 
    | 40 -> NONTERM_Exp 
    | 41 -> NONTERM_Exp 
    | 42 -> NONTERM_Exp 
    | 43 -> NONTERM_Exp 
    | 44 -> NONTERM_Exp 
    | 45 -> NONTERM_Exp 
    | 46 -> NONTERM_Exp 
    | 47 -> NONTERM_Exp 
    | 48 -> NONTERM_Exp 
    | 49 -> NONTERM_Exp 
    | 50 -> NONTERM_Exp 
    | 51 -> NONTERM_Exp 
    | 52 -> NONTERM_Exp 
    | 53 -> NONTERM_Exp 
    | 54 -> NONTERM_Exp 
    | 55 -> NONTERM_Exp 
    | 56 -> NONTERM_Exp 
    | 57 -> NONTERM_Exp 
    | 58 -> NONTERM_Exp 
    | 59 -> NONTERM_ExpL 
    | 60 -> NONTERM_ExpL 
    | 61 -> NONTERM_ExpList 
    | 62 -> NONTERM_ExpList 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 49 
let _fsyacc_tagOfErrorTerminal = 47

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | HIGH  -> "HIGH" 
  | EOF  -> "EOF" 
  | PRINT  -> "PRINT" 
  | ASG  -> "ASG" 
  | SKIP  -> "SKIP" 
  | ABORT  -> "ABORT" 
  | RETURN  -> "RETURN" 
  | FUNC  -> "FUNC" 
  | PROC  -> "PROC" 
  | NEG  -> "NEG" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | EQ  -> "EQ" 
  | LE  -> "LE" 
  | GE  -> "GE" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | NEQ  -> "NEQ" 
  | CARET  -> "CARET" 
  | AMP  -> "AMP" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMI  -> "SEMI" 
  | BAR  -> "BAR" 
  | TO  -> "TO" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | BEGIN  -> "BEGIN" 
  | END  -> "END" 
  | LP  -> "LP" 
  | LCP  -> "LCP" 
  | LSP  -> "LSP" 
  | RP  -> "RP" 
  | RCP  -> "RCP" 
  | RSP  -> "RSP" 
  | ITYP  -> "ITYP" 
  | BTYP  -> "BTYP" 
  | ATYP  -> "ATYP" 
  | NAME _ -> "NAME" 
  | STRING _ -> "STRING" 
  | BOOL _ -> "BOOL" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | HIGH  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | ASG  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | ABORT  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | FUNC  -> (null : System.Object) 
  | PROC  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | CARET  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | BEGIN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | LP  -> (null : System.Object) 
  | LCP  -> (null : System.Object) 
  | LSP  -> (null : System.Object) 
  | RP  -> (null : System.Object) 
  | RCP  -> (null : System.Object) 
  | RSP  -> (null : System.Object) 
  | ITYP  -> (null : System.Object) 
  | BTYP  -> (null : System.Object) 
  | ATYP  -> (null : System.Object) 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 4us; 2us; 3us; 3us; 65535us; 16us; 15us; 24us; 15us; 31us; 15us; 3us; 65535us; 16us; 17us; 24us; 25us; 31us; 32us; 5us; 65535us; 6us; 43us; 28us; 43us; 37us; 43us; 44us; 43us; 62us; 43us; 3us; 65535us; 28us; 29us; 37us; 38us; 62us; 65us; 5us; 65535us; 6us; 7us; 28us; 42us; 37us; 42us; 44us; 45us; 62us; 42us; 33us; 65535us; 6us; 49us; 8us; 49us; 33us; 49us; 40us; 49us; 53us; 50us; 56us; 50us; 58us; 50us; 62us; 49us; 66us; 49us; 69us; 50us; 72us; 50us; 75us; 50us; 77us; 50us; 82us; 49us; 86us; 49us; 88us; 50us; 90us; 51us; 93us; 50us; 96us; 50us; 98us; 50us; 112us; 50us; 113us; 50us; 114us; 50us; 115us; 50us; 116us; 50us; 117us; 50us; 118us; 50us; 119us; 50us; 120us; 50us; 121us; 50us; 122us; 50us; 123us; 50us; 127us; 50us; 8us; 65535us; 6us; 81us; 8us; 81us; 33us; 34us; 40us; 41us; 62us; 81us; 66us; 81us; 82us; 81us; 86us; 81us; 5us; 65535us; 6us; 11us; 8us; 9us; 62us; 63us; 66us; 67us; 86us; 87us; 6us; 65535us; 6us; 80us; 8us; 80us; 62us; 80us; 66us; 80us; 82us; 83us; 86us; 80us; 2us; 65535us; 69us; 70us; 72us; 73us; 3us; 65535us; 69us; 84us; 72us; 84us; 88us; 89us; 24us; 65535us; 53us; 54us; 56us; 57us; 58us; 59us; 69us; 85us; 72us; 85us; 75us; 76us; 77us; 111us; 88us; 85us; 93us; 94us; 96us; 97us; 98us; 99us; 112us; 100us; 113us; 101us; 114us; 102us; 115us; 103us; 116us; 104us; 117us; 105us; 118us; 106us; 119us; 107us; 120us; 108us; 121us; 109us; 122us; 110us; 123us; 111us; 127us; 111us; 2us; 65535us; 77us; 78us; 123us; 124us; 3us; 65535us; 77us; 126us; 123us; 126us; 127us; 128us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 4us; 7us; 11us; 15us; 21us; 25us; 31us; 65us; 74us; 80us; 87us; 90us; 94us; 119us; 122us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 2us; 3us; 4us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 3us; 7us; 9us; 10us; 1us; 8us; 1us; 8us; 2us; 9us; 10us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 3us; 11us; 18us; 31us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 2us; 18us; 31us; 2us; 18us; 58us; 3us; 19us; 20us; 22us; 3us; 19us; 20us; 40us; 3us; 19us; 20us; 41us; 1us; 19us; 1us; 20us; 12us; 20us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 20us; 1us; 21us; 12us; 21us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 22us; 12us; 22us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 23us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 2us; 29us; 30us; 12us; 29us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 33us; 2us; 34us; 35us; 1us; 35us; 1us; 35us; 1us; 37us; 13us; 38us; 39us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 2us; 38us; 39us; 2us; 38us; 39us; 1us; 39us; 1us; 39us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 12us; 44us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 44us; 1us; 45us; 12us; 45us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 46us; 12us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 12us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 12us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 12us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 12us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 12us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 12us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 12us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 12us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 12us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 12us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 12us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 13us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 61us; 62us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 60us; 1us; 62us; 1us; 62us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 35us; 37us; 39us; 42us; 44us; 46us; 48us; 50us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 95us; 97us; 99us; 101us; 104us; 107us; 111us; 115us; 119us; 121us; 123us; 136us; 138us; 140us; 153us; 155us; 168us; 170us; 172us; 175us; 177us; 179us; 181us; 183us; 185us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 202us; 215us; 217us; 219us; 221us; 223us; 226us; 228us; 230us; 232us; 246us; 249us; 252us; 254us; 256us; 258us; 260us; 262us; 264us; 277us; 279us; 281us; 294us; 296us; 309us; 322us; 335us; 348us; 361us; 374us; 387us; 400us; 413us; 426us; 439us; 452us; 466us; 468us; 470us; 472us; 474us; 476us; 478us; 480us; 482us; 484us; 486us; 488us; 490us; 492us; 494us; 496us; 498us; |]
let _fsyacc_action_rows = 129
let _fsyacc_actionTableElements = [|1us; 32768us; 32us; 6us; 0us; 49152us; 1us; 32768us; 32us; 6us; 0us; 49152us; 1us; 32768us; 1us; 5us; 0us; 16386us; 10us; 16416us; 2us; 56us; 4us; 60us; 5us; 61us; 6us; 75us; 7us; 26us; 8us; 35us; 28us; 69us; 30us; 72us; 35us; 62us; 43us; 23us; 1us; 32768us; 25us; 8us; 8us; 16416us; 2us; 56us; 4us; 60us; 5us; 61us; 6us; 75us; 28us; 69us; 30us; 72us; 35us; 62us; 43us; 47us; 1us; 32768us; 33us; 10us; 0us; 16387us; 1us; 32768us; 33us; 12us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 1us; 16391us; 36us; 18us; 3us; 32768us; 21us; 16us; 40us; 14us; 41us; 13us; 0us; 16392us; 2us; 32768us; 39us; 21us; 46us; 19us; 1us; 32768us; 39us; 20us; 0us; 16393us; 0us; 16394us; 1us; 32768us; 24us; 24us; 2us; 16402us; 24us; 24us; 34us; 77us; 3us; 32768us; 21us; 16us; 40us; 14us; 41us; 13us; 0us; 16395us; 1us; 32768us; 43us; 27us; 1us; 32768us; 34us; 28us; 3us; 16398us; 7us; 26us; 8us; 35us; 43us; 22us; 1us; 32768us; 37us; 30us; 1us; 32768us; 24us; 31us; 3us; 32768us; 21us; 16us; 40us; 14us; 41us; 13us; 1us; 32768us; 15us; 33us; 8us; 32768us; 2us; 56us; 4us; 60us; 5us; 61us; 6us; 75us; 28us; 69us; 30us; 72us; 35us; 62us; 43us; 47us; 0us; 16396us; 1us; 32768us; 43us; 36us; 1us; 32768us; 34us; 37us; 3us; 16398us; 7us; 26us; 8us; 35us; 43us; 22us; 1us; 32768us; 37us; 39us; 1us; 32768us; 15us; 40us; 8us; 32768us; 2us; 56us; 4us; 60us; 5us; 61us; 6us; 75us; 28us; 69us; 30us; 72us; 35us; 62us; 43us; 47us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 23us; 44us; 3us; 32768us; 7us; 26us; 8us; 35us; 43us; 22us; 0us; 16401us; 0us; 16402us; 1us; 16402us; 34us; 77us; 1us; 16402us; 34us; 123us; 3us; 32768us; 3us; 58us; 21us; 52us; 36us; 53us; 2us; 16424us; 21us; 52us; 36us; 53us; 2us; 16425us; 21us; 52us; 36us; 53us; 0us; 16403us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 12us; 32768us; 10us; 113us; 11us; 114us; 12us; 112us; 13us; 115us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 121us; 19us; 120us; 20us; 122us; 39us; 55us; 0us; 16404us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 11us; 16405us; 10us; 113us; 11us; 114us; 12us; 112us; 13us; 115us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 121us; 19us; 120us; 20us; 122us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 11us; 16406us; 10us; 113us; 11us; 114us; 12us; 112us; 13us; 115us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 121us; 19us; 120us; 20us; 122us; 0us; 16407us; 0us; 16408us; 11us; 16398us; 2us; 56us; 4us; 60us; 5us; 61us; 6us; 75us; 7us; 26us; 8us; 35us; 28us; 69us; 30us; 72us; 35us; 62us; 38us; 16416us; 43us; 23us; 1us; 32768us; 38us; 64us; 0us; 16409us; 1us; 32768us; 25us; 66us; 8us; 16416us; 2us; 56us; 4us; 60us; 5us; 61us; 6us; 75us; 28us; 69us; 30us; 72us; 35us; 62us; 43us; 47us; 1us; 32768us; 38us; 68us; 0us; 16410us; 7us; 16420us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 1us; 32768us; 29us; 71us; 0us; 16411us; 7us; 16420us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 1us; 32768us; 31us; 74us; 0us; 16412us; 7us; 16414us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 11us; 16413us; 10us; 113us; 11us; 114us; 12us; 112us; 13us; 115us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 121us; 19us; 120us; 20us; 122us; 7us; 16443us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 1us; 32768us; 37us; 79us; 0us; 16415us; 0us; 16417us; 1us; 16418us; 25us; 82us; 8us; 32768us; 2us; 56us; 4us; 60us; 5us; 61us; 6us; 75us; 28us; 69us; 30us; 72us; 35us; 62us; 43us; 47us; 0us; 16419us; 0us; 16421us; 12us; 32768us; 10us; 113us; 11us; 114us; 12us; 112us; 13us; 115us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 121us; 19us; 120us; 20us; 122us; 27us; 86us; 8us; 16416us; 2us; 56us; 4us; 60us; 5us; 61us; 6us; 75us; 28us; 69us; 30us; 72us; 35us; 62us; 43us; 47us; 1us; 16422us; 26us; 88us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 0us; 16423us; 1us; 32768us; 43us; 46us; 0us; 16426us; 0us; 16427us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 12us; 32768us; 10us; 113us; 11us; 114us; 12us; 112us; 13us; 115us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 121us; 19us; 120us; 20us; 122us; 37us; 95us; 0us; 16428us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 1us; 16429us; 12us; 112us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 9us; 16430us; 10us; 113us; 11us; 114us; 12us; 112us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 121us; 19us; 120us; 20us; 122us; 0us; 16431us; 1us; 16432us; 12us; 112us; 1us; 16433us; 12us; 112us; 9us; 16434us; 10us; 113us; 11us; 114us; 12us; 112us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 121us; 19us; 120us; 20us; 122us; 9us; 16435us; 10us; 113us; 11us; 114us; 12us; 112us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 121us; 19us; 120us; 20us; 122us; 3us; 16436us; 10us; 113us; 11us; 114us; 12us; 112us; 3us; 16437us; 10us; 113us; 11us; 114us; 12us; 112us; 3us; 16438us; 10us; 113us; 11us; 114us; 12us; 112us; 3us; 16439us; 10us; 113us; 11us; 114us; 12us; 112us; 3us; 16440us; 10us; 113us; 11us; 114us; 12us; 112us; 3us; 16441us; 10us; 113us; 11us; 114us; 12us; 112us; 12us; 16445us; 10us; 113us; 11us; 114us; 12us; 112us; 13us; 115us; 14us; 116us; 15us; 117us; 16us; 118us; 17us; 119us; 18us; 121us; 19us; 120us; 20us; 122us; 23us; 127us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 7us; 16443us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 1us; 32768us; 37us; 125us; 0us; 16442us; 0us; 16444us; 7us; 32768us; 9us; 98us; 11us; 96us; 22us; 90us; 34us; 93us; 43us; 48us; 45us; 92us; 46us; 91us; 0us; 16446us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 8us; 9us; 20us; 22us; 31us; 33us; 34us; 36us; 37us; 38us; 39us; 41us; 45us; 46us; 49us; 51us; 52us; 53us; 55us; 58us; 62us; 63us; 65us; 67us; 71us; 73us; 75us; 79us; 81us; 90us; 91us; 93us; 95us; 99us; 101us; 103us; 112us; 113us; 114us; 116us; 120us; 121us; 122us; 124us; 126us; 130us; 133us; 136us; 137us; 145us; 158us; 159us; 167us; 179us; 187us; 199us; 200us; 201us; 213us; 215us; 216us; 218us; 227us; 229us; 230us; 238us; 240us; 241us; 249us; 251us; 252us; 260us; 272us; 280us; 282us; 283us; 284us; 286us; 295us; 296us; 297us; 310us; 319us; 321us; 329us; 330us; 332us; 333us; 334us; 342us; 355us; 356us; 364us; 366us; 374us; 384us; 385us; 387us; 389us; 399us; 409us; 413us; 417us; 421us; 425us; 429us; 433us; 446us; 454us; 462us; 470us; 478us; 486us; 494us; 502us; 510us; 518us; 526us; 534us; 542us; 544us; 545us; 546us; 554us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 5us; 3us; 1us; 1us; 1us; 2us; 4us; 3us; 3us; 9us; 7us; 0us; 1us; 1us; 3us; 1us; 2us; 4us; 2us; 3us; 1us; 1us; 3us; 5us; 3us; 3us; 2us; 1us; 4us; 0us; 1us; 1us; 3us; 0us; 1us; 3us; 5us; 1us; 2us; 1us; 1us; 3us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 0us; 1us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 16386us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 16388us; 16389us; 16390us; 65535us; 65535us; 16392us; 65535us; 65535us; 16393us; 16394us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 16402us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 16407us; 16408us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 16411us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16415us; 16417us; 65535us; 65535us; 16419us; 16421us; 65535us; 65535us; 65535us; 65535us; 16423us; 65535us; 16426us; 16427us; 65535us; 65535us; 16428us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16442us; 16444us; 65535us; 16446us; |]
let _fsyacc_reductions ()  =    [| 
# 420 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 429 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startProg));
# 438 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                              _1 
                   )
# 38 "Parser.fsy"
                 : Program));
# 449 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                              P(_2, _4) 
                   )
# 41 "Parser.fsy"
                 : Program));
# 461 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                              P([], _2) 
                   )
# 42 "Parser.fsy"
                 : Program));
# 472 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                             BTyp 
                   )
# 46 "Parser.fsy"
                 : Typ));
# 482 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                             ITyp 
                   )
# 47 "Parser.fsy"
                 : Typ));
# 492 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                             _1 
                   )
# 50 "Parser.fsy"
                 : Typ));
# 503 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                               PTyp(_2) 
                   )
# 51 "Parser.fsy"
                 : Typ));
# 514 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Typ)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                  ATyp(_1,Some(_3)) 
                   )
# 52 "Parser.fsy"
                 : Typ));
# 526 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                                   ATyp(_1,None) 
                   )
# 53 "Parser.fsy"
                 : Typ));
# 537 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                                    VarDec(_3,_1) 
                   )
# 56 "Parser.fsy"
                 : Dec));
# 549 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : Typ)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                                   FunDec(Some(_7),_2,_4,_9) 
                   )
# 57 "Parser.fsy"
                 : Dec));
# 563 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                               FunDec(None, _2, _4, _7) 
                   )
# 58 "Parser.fsy"
                 : Dec));
# 576 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                             [] 
                   )
# 61 "Parser.fsy"
                 : Dec list));
# 586 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                             _1 
                   )
# 62 "Parser.fsy"
                 : Dec list));
# 597 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                             [_1] 
                   )
# 65 "Parser.fsy"
                 : Dec list));
# 608 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                             _1 :: _3 
                   )
# 66 "Parser.fsy"
                 : Dec list));
# 620 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                             AVar _1 
                   )
# 69 "Parser.fsy"
                 : Access));
# 631 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                             ADeref( Access ( _1 ) ) 
                   )
# 70 "Parser.fsy"
                 : Access));
# 642 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                             AIndex(_1, _3) 
                   )
# 71 "Parser.fsy"
                 : Access));
# 654 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                             PrintLn _2 
                   )
# 75 "Parser.fsy"
                 : Stm));
# 665 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                             Ass(_1,_3)  
                   )
# 76 "Parser.fsy"
                 : Stm));
# 677 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                             Do (GC []) 
                   )
# 77 "Parser.fsy"
                 : Stm));
# 687 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                             Alt (GC []) 
                   )
# 78 "Parser.fsy"
                 : Stm));
# 697 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                             Block([], _2) 
                   )
# 79 "Parser.fsy"
                 : Stm));
# 708 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                             Block(_2, _4) 
                   )
# 80 "Parser.fsy"
                 : Stm));
# 720 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : GuardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                             Alt _2 
                   )
# 81 "Parser.fsy"
                 : Stm));
# 731 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : GuardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                             Do _2  
                   )
# 82 "Parser.fsy"
                 : Stm));
# 742 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                             Return Some(_2) 
                   )
# 83 "Parser.fsy"
                 : Stm));
# 753 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                             Return None 
                   )
# 84 "Parser.fsy"
                 : Stm));
# 763 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpL)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                             Call (_1, _3) 
                   )
# 85 "Parser.fsy"
                 : Stm));
# 775 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                             [] 
                   )
# 88 "Parser.fsy"
                 : Stm list));
# 785 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                             _1 
                   )
# 89 "Parser.fsy"
                 : Stm list));
# 796 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                             [_1] 
                   )
# 92 "Parser.fsy"
                 : Stm list));
# 807 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                             _1 :: _3 
                   )
# 93 "Parser.fsy"
                 : Stm list));
# 819 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                             GC [] 
                   )
# 96 "Parser.fsy"
                 : GuardedCommand));
# 829 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (Exp * Stm list) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                             GC _1 
                   )
# 97 "Parser.fsy"
                 : GuardedCommand));
# 840 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                             [(_1,_3)]   
                   )
# 100 "Parser.fsy"
                 : (Exp * Stm list) list));
# 852 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : (Exp * Stm list) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                         (_1,_3)::_5 
                   )
# 101 "Parser.fsy"
                 : (Exp * Stm list) list));
# 865 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                             Access _1 
                   )
# 104 "Parser.fsy"
                 : Exp));
# 876 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                             Addr _2 
                   )
# 105 "Parser.fsy"
                 : Exp));
# 887 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                             N _1 
                   )
# 106 "Parser.fsy"
                 : Exp));
# 898 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                             B _1 
                   )
# 107 "Parser.fsy"
                 : Exp));
# 909 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                             _2 
                   )
# 108 "Parser.fsy"
                 : Exp));
# 920 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                             Apply("-", [_2])
                   )
# 109 "Parser.fsy"
                 : Exp));
# 931 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                             Apply("!", [_2])
                   )
# 110 "Parser.fsy"
                 : Exp));
# 942 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                             Apply("*", [_1; _3])
                   )
# 111 "Parser.fsy"
                 : Exp));
# 954 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                             Apply("+", [_1; _3])
                   )
# 112 "Parser.fsy"
                 : Exp));
# 966 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                             Apply("-", [_1; _3])
                   )
# 113 "Parser.fsy"
                 : Exp));
# 978 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                             Apply("&&", [_1; _3])
                   )
# 114 "Parser.fsy"
                 : Exp));
# 990 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                             Apply("||", [_1; _3])
                   )
# 115 "Parser.fsy"
                 : Exp));
# 1002 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                             Apply("=", [_1; _3])
                   )
# 116 "Parser.fsy"
                 : Exp));
# 1014 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                             Apply("<=", [_1; _3])
                   )
# 117 "Parser.fsy"
                 : Exp));
# 1026 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                             Apply(">=", [_1; _3])
                   )
# 118 "Parser.fsy"
                 : Exp));
# 1038 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                             Apply(">", [_1; _3])
                   )
# 119 "Parser.fsy"
                 : Exp));
# 1050 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                             Apply("<", [_1; _3])
                   )
# 120 "Parser.fsy"
                 : Exp));
# 1062 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                             Apply("<>", [_1; _3])
                   )
# 121 "Parser.fsy"
                 : Exp));
# 1074 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpL)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                             Apply(_1,_3) 
                   )
# 122 "Parser.fsy"
                 : Exp));
# 1086 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                             [] 
                   )
# 126 "Parser.fsy"
                 : 'ExpL));
# 1096 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                             _1 
                   )
# 127 "Parser.fsy"
                 : 'ExpL));
# 1107 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                             [_1] 
                   )
# 130 "Parser.fsy"
                 : 'ExpList));
# 1118 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExpList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                             _1 :: _3
                   )
# 131 "Parser.fsy"
                 : 'ExpList));
|]
# 1131 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 50;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let Prog lexer lexbuf : Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
